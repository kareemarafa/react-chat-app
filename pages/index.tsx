import type {NextPage} from 'next'
import Head from 'next/head'
import styles from '../styles/Home.module.css'
import {useFormik} from 'formik';
import {useEffect, useRef, useState} from "react";
import {io} from "socket.io-client";

interface Values {
  userId: number;
  message: string;
}

const socket = io("ws://localhost:3001")
const handleSubmitNewMessage = ({message, userId}: any) => {
  socket.emit('chat', {message, userId});
}

const Home: NextPage = () => {

  const [messages, setMessages] = useState<any[]>([]);

  useEffect(() => {
    socket.once('chat', (message: any) => {
      setMessages([...messages, message]);
    })
  });

  const messagesEndRef = useRef<HTMLElement>()

  const scrollToBottom = () => {
    const scrollHeight = messagesEndRef?.current?.scrollHeight;
    messagesEndRef?.current?.scrollTo({top: scrollHeight})
  }

  useEffect(() => {
    return () => {
      scrollToBottom()
    };
  }, [messages]);


  const messageInput = useRef<HTMLInputElement>();

  const {
    handleChange,
    handleBlur,
    handleSubmit,
    handleReset,
    validateForm,
    errors,
    touched,
    values,
    setFieldValue,
  } = useFormik<Values>({
    initialValues: {message: '', userId: 1},
    onSubmit: (values: Values) => {
      handleSubmitNewMessage(values)
      setFieldValue('message', '');
      messageInput.current?.focus();
    },
    enableReinitialize: true,
  });

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app"/>
        <link rel="icon" href="/favicon.ico"/>
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet"
              crossOrigin="anonymous"/>
      </Head>

      <main className={styles.main}>
        <div className="d-flex flex-column">
          <div className="row">
            <div className="w-25 mx-3 d-flex flex-column">
              <label htmlFor="userId">UserId</label>
              <input
                onChange={handleChange('userId')}
                onBlur={handleBlur('userId')}
                value={values['userId']}
                className="my-2 form-control-sm"
                type="number"
                name="userId"
                placeholder="UserId"/>
            </div>
          </div>

          <div ref={messagesEndRef} className={styles.conversation}>
            <ul className="list-unstyled ">
              {messages.map((data, index) => <li key={index} className="py-2 d-flex flex-column">
                <div className={data.userId === values.userId ? styles.mePos : styles.theyPos}>
                  <div
                    className={values.userId === data.userId ? 'd-flex algin-self-end flex-row-reverse' : 'd-flex algin-self-end flex-row'}>
                    <div
                      className={values.userId === data.userId ? 'mx-2 d-flex flex-column align-self-end' : 'mx-2 d-flex flex-column align-self-end'}>
                      <div className={styles.convImage}>
                        <img className="img-thumbnail rounded-circle"
                             src="https://scontent.fcai20-2.fna.fbcdn.net/v/t39.30808-1/c0.18.100.100a/p100x100/244514571_1047061692707878_4749480805515946745_n.jpg?_nc_cat=105&ccb=1-5&_nc_sid=7206a8&_nc_ohc=kGyeIUyLV9cAX8MKaZd&_nc_ad=z-m&_nc_cid=0&_nc_ht=scontent.fcai20-2.fna&oh=00_AT_TMjQsUa55JdXDZlsB-oETiDcV2XWvygqujgsXQsk_BA&oe=620BB08B"/>
                      </div>
                    </div>
                    <div className={data.userId === values.userId ? styles.me : styles.they}>
                      <p className={data.userId === values.userId ? 'text-white' : 'text-secondary'}>{data.message}</p>
                    </div>
                  </div>
                </div>
              </li>)}
            </ul>
          </div>
          <div className="row">
            <div className="d-flex flex-row align-items-base position-fixed bottom-0 p-3">
              <input
                ref={messageInput}
                onChange={handleChange('message')}
                onBlur={handleBlur('message')}
                value={values['message']}
                className="form-control"
                name="message"
                onKeyUp={(e: any) => e.key === 'Enter' && handleSubmit()}
                placeholder="Aa"/>
              <button type="button" className="btn btn-primary mx-2" onClick={() => handleSubmit()}>Send</button>
            </div>
          </div>
        </div>
      </main>
    </div>
  )
}

export default Home
